{
  
    
        "post0": {
            "title": "Create Performance Task Outline/Planning",
            "content": "App or Webpage Ideas Brainstorming . A study app | A workout planner/tracker | Wordle Game | . Wordle Game . Similar to the New York Times “Wordle” | Normal mode: 6 tries to guess Blue: letters are in the word, not correct space | Green: letters are in the word, and in the correct space | Grey: letters are not in the word | . | A word is five letters | . | Second mode: change number of letters, change allowed guesses, set a time limit, do specific genres or topics | Ideas to implement add hints: gives letters that are in the words, reveals one | stats/scores after every few games | clear the screen | . | Knowlege needed: webpage, user input, animations, keyboard | . A Study App . Description An app that allows students to organize/plan their homework tasks, tests, quizzes, due dates | . | Aspects Have a timer to keep students on track for homework. Pomedero Technique | . | Have a calender to be used as a planner. Add dates and days. Color code all classes. | A to-do list | Motivational quotes | A daily scheduler | A weekly scheduler | . | Ideas to implement syncing with other apps, such as canvas. | . | . Questions . What can you design now? . I can start working on an outline. | I can design the graphics and the visual aspects of the project now. | . What do you need to learn to complete the Create Performance Task design process? . A programming language. Probably HTML for a website. | The syntax | How to properly/effectively outline a project. | . What resources do you have available to start on the design journey? . College Board | Khan Academy | W3 Schools | Youtube | The APCSP Fastpages and blogs from former students. | . What I will do personally to improve my coding skills before create performance task. . Here are some ideas that I will use to learn more about coding: . Going though the AP computer science principles videos on Khan Academy and doing their exercies. | Watching and taking notes on the college board AP CSP videos. I will also take practice quizzes on college board. | Going though exersices on W3 schools. This would be a great way for me to learn how to code. | .",
            "url": "https://sreejagangapuram.github.io/Sreeja-Gangapuram/markdown/week3/2022/11/09/createperformancetaskplanning.html",
            "relUrl": "/markdown/week3/2022/11/09/createperformancetaskplanning.html",
            "date": " • Nov 9, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "App Lab Quiz - Design, Successes, Discoveries, and Challenges",
            "content": "Link to Taylor Swift Album Quiz . Design and Successes . (check out other post for outline/planning of quiz). . Program Purpose and Function . I don’t have a video explaining my code or a written response, but I will attempt to explain my code to my teacher during my live review. . Data Abstraction . In my code, I have a variable called “score.” With each correct answer, this variable increments by one. In the end of the quiz, this value (out of 3), shows up on the last screen. . Managing Complexity . As a result of my code not being too complex, I didn’t have selected lists to manage complexity in my code. But this is something I should keep in mind when coding future projects. . Procedural Abstraction . I don’t have any procedures with parameters in my code, but if I would impletment one, I would probably use one for my score variable where it increments by one for each correct answer. . Algorithm Implementation . My code has iteration when displaying the incremented score in my code. I understand my code well enough to explain the steps to my teacher during my live review on monday. . Testing . The parameters that I have in my code concern the correct and incorrect answers. For example, the sound “correct” only appears when the correct answer is chosen. And the score only increments when the correct answer is chosen. . Discoveries . I discovered that youtube and online reasources can be very helpful when trying out new lines of code. I used youtube in combination with the code.org articles in order to understand the uses for each piece of code. . Challenges . One challenge I faced was not having a clear plan to use. When I started to create a quiz without a plan, I became easily confused on what I had to do next. Making a plan really helped me develop my ideas. In addition, I struggled with understanding what each piece or section of code was used for. Lastly, sometimes errors popped up when I attempted to use the text code instead of the blocks. It took me a while in order to fix these errors. .",
            "url": "https://sreejagangapuram.github.io/Sreeja-Gangapuram/markdown/week3/2022/11/09/blogreviewforquiz.html",
            "relUrl": "/markdown/week3/2022/11/09/blogreviewforquiz.html",
            "date": " • Nov 9, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "App Lab Program Design Quiz Planning",
            "content": "Link to Taylor Swift Album Quiz . An idea to work on if time allows, make a “pro mode” and make the questions more difficult. Make user enter the answer in, instead of having multiple choice questions. **edit: attempted this, but couldn’t figure out how to get the enter and gettext() function to work. . Basic Information about the Quiz . Name of Quiz: Guess the Taylor Swift Album Cover. . Number of Questions: 3 in total. . 3 Multiple Choie Questions with her recent albums. | . Screens . Title “Guess the Taylor Swift Album Cover Quiz!” | Add Picture of TS | “Choose a mode below. Click the easy mode if your knowledge is limited. Click on the pro mode if you dare.” | Start! Button - Go to slide number 2 | . | MC Question 1 Add Image | Which Album Cover is this? Choose your answer below: | Correct answer: Evermore | All Answers: Evermore, Folklore, Lover, Red | . | MC Question 2 Add image | Which Album Cover is this? Choose your answer below: | Correct answer: Folklore | All Answers: Evermore, Folklore, Lover, Red | . | MC Question 3 Add Image | Which Album Cover is this? Choose your answer below: | Correct answer: Lover | All Answers: Evermore, Folklore, Lover, Red | . | Score “Your score is…” | Display score | Back to Homepage Button | . | *edit: used a variable to store the score. and incremented the variable each time. .",
            "url": "https://sreejagangapuram.github.io/Sreeja-Gangapuram/markdown/week3/2022/09/09/planforquiz.html",
            "relUrl": "/markdown/week3/2022/09/09/planforquiz.html",
            "date": " • Sep 9, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Python Lists, Dictionaries, Iteration Hacks",
            "content": "Lists and Dictionaries . As a quick review we used variables in the introduction last week. Variables all have a type: String, Integer, Float, List and Dictionary are some key types. In Python, variables are given a type at assignment, Types are important to understand and will impact operations, as we saw when we were required to user str() function in concatenation. . Developers often think of variables as primitives or collections. Look at this example and see if you can see hypothesize the difference between a primitive and a collection. | Take a minute and see if you can reference other elements in the list or other keys in the dictionary. Show output. | Notes: . Key Types of Variables: tring, Integer, Float, List and Dictionary. | Difference between a primative and a collection: A primative type is a basic building block of programming. A collection requires objects for manipulation. | . # variable of type string name = &quot;Sreeja Gangapuram&quot; print(&quot;name&quot;, name, type(name)) print() # variable of type integer age = 15 print(&quot;age&quot;, age, type(age)) print() # variable of type float score = 100.0 print(&quot;score&quot;, score, type(score)) print() # variable of type list (many values in one variable) langs = [&quot;Python&quot;, &quot;JavaScript&quot;, &quot;Java&quot;] print(&quot;langs&quot;, langs, type(langs), &quot;length&quot;, len(langs)) print(&quot;- langs[0]&quot;, langs[0], type(langs[0])) print() # variable of type dictionary (a group of keys and values) person = { &quot;name&quot;: name, &quot;age&quot;: age, &quot;score&quot;: score, &quot;langs&quot;: langs } print(&quot;person&quot;, person, type(person), &quot;length&quot;, len(person)) print(&#39;- person[&quot;name&quot;]&#39;, person[&quot;name&quot;], type(person[&quot;name&quot;])) . name Sreeja Gangapuram &lt;class &#39;str&#39;&gt; age 15 &lt;class &#39;int&#39;&gt; score 100.0 &lt;class &#39;float&#39;&gt; langs [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;] &lt;class &#39;list&#39;&gt; length 3 - langs[0] Python &lt;class &#39;str&#39;&gt; person {&#39;name&#39;: &#39;Sreeja Gangapuram&#39;, &#39;age&#39;: 15, &#39;score&#39;: 100.0, &#39;langs&#39;: [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;]} &lt;class &#39;dict&#39;&gt; length 4 - person[&#34;name&#34;] Sreeja Gangapuram &lt;class &#39;str&#39;&gt; . Randomized Order Selection . import random print(&quot;Book choices&quot;) books = [&quot;A Good Girl&#39;s Guide to Murder&quot;, &quot;The Silent Patient&quot;, &quot;Verity&quot;, &quot;The Spanish Love Deception&quot;] randomBook = random.choice(books) print(&quot;A Good Book reccomendation is&quot;, randomBook+ &quot;:)&quot;) . Book choices A Good Book reccomendation is The Spanish Love Deception:) . Print in Reversed Order With Function . cakes = [&quot;Chocolate&quot;, &quot;Red Velvet&quot;, &quot;Vanilla&quot;, &quot;Chocolate Chip&quot;, &quot;Confetti&quot;] cakes.reverse() print(&#39; nReversed List:&#39;, cakes) . Reversed List: [&#39;Confetti&#39;, &#39;Chocolate Chip&#39;, &#39;Vanilla&#39;, &#39;Red Velvet&#39;, &#39;Chocolate&#39;] . Print in Reversed Order Without using reverse() Function . cakes = [&quot;Chocolate&quot;, &quot;Red Velvet&quot;, &quot;Vanilla&quot;, &quot;Chocolate Chip&quot;, &quot;Confetti&quot;] #initializing i with the length minus 1 i = len(cakes)-1 print(&#39; nReversed List:&#39;, cakes) #checking that i is greater than or equal to 0. while i &gt;= 0: print(cakes[i]) #decrementing by one each time i = i-1 . Reversed List: [&#39;Chocolate&#39;, &#39;Red Velvet&#39;, &#39;Vanilla&#39;, &#39;Chocolate Chip&#39;, &#39;Confetti&#39;] Confetti Chocolate Chip Vanilla Red Velvet Chocolate . List and Dictionary Purpose . Our society is being built on information. List and Dictionaries are used to collect information. Mostly, when information is collected it is formed into patterns. As that pattern is established you will be able collect many instances of that pattern. . List is used to collect many instances of a pattern | Dictionary is used to define data patterns. | Iteration is often used to process through lists. | . To start exploring more deeply into List, Dictionary and Iteration this example will explore constructing a List of people and cars. . As we learned above, a List is a data type: class &#39;list&#39; | A &#39;list&#39; data type has the method &#39;.append(expression)&#39; that allows you to add to the list. A class usually has extra method to support working with its objects/instances. | In the example below, the expression is appended to the &#39;list&#39; is the data type: class &#39;dict&#39; | At the end, you see a fairly complicated data structure. This is a list of dictionaries, or a collection of many similar data patterns. The output looks similar to JavaScript Object Notation (JSON), Jekyll/GitHub pages yml files, FastPages Front Matter. As discussed we will see this key/value patter often, you will be required to understand this data structure and understand the parts. Just believe it is peasy ;) and it will become so. | . InfoDb = [] # InfoDB is a data structure with expected Keys and Values # Append to List a Dictionary of book titles, their authors, published date, and more information about them. InfoDb.append({ &quot;BookTitle&quot;: &quot;A Good Girl&#39;s Guide to Murder&quot;, &quot;Author&quot;: &quot;Holly Jackson&quot;, &quot;DatePublished&quot;: &quot;May 2, 2019&quot;, &quot;Genre(s)&quot;: &quot;Mystery, Young adult fiction&quot;, &quot;Review&quot;: [&quot;4.4&quot;] }) # Append to List a 2nd Dictionary of key/values InfoDb.append({ &quot;BookTitle&quot;: &quot;The Silent Patient&quot;, &quot;Author&quot;: &quot;Alex Michaelides&quot;, &quot;DatePublished&quot;: &quot;February 5, 2019&quot;, &quot;Genre(s)&quot;: &quot;Thriller, Novel, Mystery, Suspense, Psychological Fiction, Crime Fiction&quot;, &quot;Review&quot;: [&quot;4.2&quot;] }) # Print the data structure print(InfoDb) . [{&#39;BookTitle&#39;: &#34;A Good Girl&#39;s Guide to Murder&#34;, &#39;Author&#39;: &#39;Holly Jackson&#39;, &#39;DatePublished&#39;: &#39;May 2, 2019&#39;, &#39;Genre(s)&#39;: &#39;Mystery, Young adult fiction&#39;, &#39;Review&#39;: [&#39;4.4&#39;]}, {&#39;BookTitle&#39;: &#39;The Silent Patient&#39;, &#39;Author&#39;: &#39;Alex Michaelides&#39;, &#39;DatePublished&#39;: &#39;February 5, 2019&#39;, &#39;Genre(s)&#39;: &#39;Thriller, Novel, Mystery, Suspense, Psychological Fiction, Crime Fiction&#39;, &#39;Review&#39;: [&#39;4.2&#39;]}] . For Loop . Managing data in Lists and Dictionaries is for the convenience of passing the data across the internet, to applications, or preparing it to be stored into a database. It is a great way to exchange data between programs and programmers. Exchange of data between programs includes the data type the method/function and the format of the data type. These concepts are key to learning how to write functions, receive, and return data. This process is often referred to as an Application Programming Interface (API). . Next, we will take the stored data and output it within our notebook. There are multiple steps to this process... . Preparing a function to format the data, the print_data() function receives a parameter called &quot;d_rec&quot; short for dictionary record. It then references different keys within [] square brackets. | Preparing a function to iterate through the list, the for_loop() function uses an enhanced for loop that pull record by record out of InfoDb until the list is empty. Each time through the loop it call print_data(record), which passes the dictionary record to that function. | Finally, you need to activate your function with the call to the defined function for_loop(). Functions are defined, not activated until they are called. By placing for_loop() at the left margin the function is activated. | . # print function: given a dictionary of InfoDb content def print_data(d_rec): print(d_rec[&quot;BookTitle&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Author:&quot;, d_rec[&quot;Author&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;DatePublished:&quot;, d_rec[&quot;DatePublished&quot;]) print(&quot; t&quot;, &quot;Genre(s):&quot;, d_rec[&quot;Genre(s)&quot;]) print(&quot; t&quot;, &quot;Review:&quot;, d_rec[&quot;Review&quot;]) print() # for loop algorithm iterates on length of InfoDb def for_loop(): print(&quot;For loop output n&quot;) for record in InfoDb: print_data(record) for_loop() . For loop output A Good Girl&#39;s Guide to Murder Author: Holly Jackson DatePublished: May 2, 2019 Genre(s): Mystery, Young adult fiction Review: [&#39;4.4&#39;] The Silent Patient Author: Alex Michaelides DatePublished: February 5, 2019 Genre(s): Thriller, Novel, Mystery, Suspense, Psychological Fiction, Crime Fiction Review: [&#39;4.2&#39;] . While loop . In coding, there are usually many ways to achieve the same result. Defined are functions illustrating using index to reference records in a list, these methods are called a &quot;while&quot; loop and &quot;recursion&quot;. . The while_loop() function contains a while loop, &quot;while i &lt; len(InfoDb):&quot;. This counts through the elements in the list start at zero, and passes the record to print_data() | . # while loop algorithm contains an initial n and an index incrementing statement (n += 1) def while_loop(): print(&quot;While loop output n&quot;) i = 0 while i &lt; len(InfoDb): record = InfoDb[i] print_data(record) i += 1 return while_loop() . While loop output A Good Girl&#39;s Guide to Murder Author: Holly Jackson DatePublished: May 2, 2019 Genre(s): Mystery, Young adult fiction Review: [&#39;4.4&#39;] The Silent Patient Author: Alex Michaelides DatePublished: February 5, 2019 Genre(s): Thriller, Novel, Mystery, Suspense, Psychological Fiction, Crime Fiction Review: [&#39;4.2&#39;] . Recursion . This final technique achieves looping by calling itself repeatedly. . recursive_loop(i) function is primed with the value 0 on its activation with &quot;recursive_loop(0)&quot; | the last statement indented inside the if statement &quot;recursive_loop(i + 1)&quot; activates another call to the recursive_loop(i) function, each time i is increasing | ultimately the &quot;if i &lt; len(InfoDb):&quot; will evaluate to false and the program ends | . # recursion algorithm loops incrementing on each call (n + 1) until exit condition is met def recursive_loop(i): if i &lt; len(InfoDb): record = InfoDb[i] print_data(record) recursive_loop(i + 1) return print(&quot;Recursive loop output n&quot;) recursive_loop(0) . Recursive loop output A Good Girl&#39;s Guide to Murder Author: Holly Jackson DatePublished: May 2, 2019 Genre(s): Mystery, Young adult fiction Review: [&#39;4.4&#39;] The Silent Patient Author: Alex Michaelides DatePublished: February 5, 2019 Genre(s): Thriller, Novel, Mystery, Suspense, Psychological Fiction, Crime Fiction Review: [&#39;4.2&#39;] . Quiz . This quiz stores in the list of dictionaries. . import getpass, sys #used three variables (q1, q2, q3) for the questions. q1 = &quot;Who is the author of A Good Girl&#39;s Guide To Murder?&quot; q2 = &quot;What is the rating of The Silent Patient?&quot; q3 = &quot;In what year were A Good Girl&#39;s Guide to Murder and The Silent Patient published?&quot; #defining a dictionary using the above questions and answers. quiz = { q1: &quot;Holly Jackson&quot;, q2: &quot;4.2&quot;, q3: &quot;2019&quot; } def question_and_answer(prompt): print(&quot;Question: &quot; + prompt) msg = input() print(&quot;Answer: &quot; + msg) def question_with_response(prompt): print(&quot;Question: &quot; + prompt) msg = input() return msg #evaluating the answer using the get() function on the dictionary. &quot;Python dictionary method get() returns a value for the given key. If key is not available then returns default value None.&quot; def evaluate_answer(question, response, correct): if response == quiz.get(question): print(response + &quot; is correct!&quot;) correct += 1 else: print(response + &quot; is incorrect!&quot;) return correct questions = 3 correct = 0 print(&#39;Hello, &#39; + getpass.getuser() + &quot; running &quot; + sys.executable) print(&quot;You will be asked &quot; + str(questions) + &quot; questions.&quot;) question_and_answer(&quot;Are you ready to take a test?&quot;) rsp = question_with_response(q1) correct = evaluate_answer(q1, rsp, correct) print(correct) rsp = question_with_response(q2) correct = evaluate_answer(q2, rsp, correct) print(correct) rsp = question_with_response(q3) correct = evaluate_answer(q3, rsp, correct) print(correct) print(getpass.getuser() + &quot; you scored &quot; + str(correct) +&quot;/&quot; + str(questions)) . Hello, SreejaGangapuram running /usr/local/bin/python3 You will be asked 3 questions. Question: Are you ready to take a test? Answer: yes Question: Who is the author of A Good Girl&#39;s Guide To Murder? Holly Jackson is correct! 1 Question: What is the rating of The Silent Patient? 4.2 is correct! 2 Question: In what year were A Good Girl&#39;s Guide to Murder and The Silent Patient published? 2019 is correct! 3 SreejaGangapuram you scored 3/3 .",
            "url": "https://sreejagangapuram.github.io/Sreeja-Gangapuram/collegeboard/python_lists",
            "relUrl": "/collegeboard/python_lists",
            "date": " • Sep 6, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Changing Remote Theme Problems",
            "content": "Screenshots of Temporarily Changing Remote Theme to Cayman . My code change: . The theme changes reflected in my website: . The Problems . After changing the theme of my blog from the default, minima, to Cayman, I noticed many changes. Firstly, the menu bar of my website went away and my pages on my menu disappeared. All of the links were gone. Next, a large area of my blog was taken up by a blue/green bar. The font also changed. Next, the box around each individual post went away and all of my posts were listed as bullet points. .",
            "url": "https://sreejagangapuram.github.io/Sreeja-Gangapuram/markdown/week2/2022/09/05/changingthemeproblem.html",
            "relUrl": "/markdown/week2/2022/09/05/changingthemeproblem.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "CS Alumnai Panel Write-up - Sreeja Gangapuram",
            "content": "CS Alumnai Panel Write-up . During the CS Alumani panel, I was exposed to possible majors and opportunities for internships. I realized that Computer Science could possibly be a career path for me. Most importantly, the panel taught me to not take shortcuts and try my best in this class, because it may be the best tool in preparing me for my future. During the panel, I took some notes on what I thought was most benefical to me. I’m adding my notes below and my thoughts on how this learning can help me. . Possible Majors . There are a lot of majors that I can explore in college that involve computer science. So learning the basics of programming will be beneficial to me. Here are some examples of majors and combination of majors. . Computer Science | Psychology + Computer science | Cognitive science | Mechanical Engineering | Can switch majors (example - aerospace to cognitive science) | . My main takeway from these examples of majors is that I don’t have to major in traditional computer science. If I have an intrest in another subject, I can try finding a major combining computer science and my interest. . Choosing a Major Related to CS . Before choosing a major related to computer science, take intro classes. Some examples - (CSP: includes web development, a basic background and introduction, technical skills building; CSA: take this class after CSP; Intro to CS: not offered currently). | See what you are good at compared to your other classmates. Consider choosing this strong point as a possible career. | And also see what aspects of CS you enjoy. | A possible interest in topics like: web development, web design, Making games. | Piece of advice: It’s okay not to immediately like CS | Maybe become an intern and do and internships. This gives you more experiance.You will get to complete programming related tasks and projects. | . While I consider majors for college, I should think about my strengths and my interests. These would make for good majors. It might benefit me to start applying for internships to get some real experiance. . Biggest Challenges Faced by the Alumnai . Starting computer science is a struggle for everyone. Everyone faces frustrating experiances. For example, github might send error messages. But this can be fixed by googling the problem and having a positive mindset. Advice: stop the urge to cut corners, go above and beyond - this solves much more problems in the long run, be willing to learn coding. | . | Clashing egos of others. Some boast about their experiance. It would be best to work on my own projects and don’t worry about what other people think. | The transition from high school to college is pretty rough because there is a lot of change in the structure of classes. | Finding the motivation to do computer science. A lot of team members can be smarter than me. And syntax can be frustrating. I can use programming logic and google can answer a lot of my questions. | . These alumnai have faced many challenges and their main advice is to try harder and to have a postive mindset. Now, I should attempt to give this class my full effort and learn as much as I can in order to supplement my future learning. . Classes and Project Based Learning Classes . There will very few hands on experiances, so I should take advantage of them. These classes include building and fabricating. | You can’t get one-on-one time from your teacher because there are more than two hundred students per lecture hall. So I should join or start study groups. I need to try to make my learning more efficient for myself. | . Classes in college are going to involve a lot more self accountability of my own learning. So I should attempt connecting with my peers to study the content. . CS Application to Other Majors . An example of CS application: if I need to convert a word doc to a spreadsheet, I can write code or code parts of the project to make it easier on myself. | Another example would be 3D-printing. I can code the project and test it without actually having to print it. | High level math course or Mathlab: debugging and advanced calculations are used. | . CS is applied to many other majors. So learning CS or basic programming will be helpful even if I don’t go into the CS field. . Jobs, Especially with a Professor . Try to find ways to stand out to your teacher and start referencing. You can do this by asking a lot of questions and going to office hours. | Create a resume. | Robotics coaches are often lecturers at UCSD, and also lead clubs and run reaserch labs. Ask if there is space in a professor’s reaserch lab. If they ask for a resume, send it to them. | You can be a TA and interact with students or be a bus driver on campus. | Internships: LG | A tech company internship, lasting three years. This is an example of what you can do for each of the three years: First year: wiring diagrams, technical drawing revisions; | Second year: visualizing flight data, creating a website for flight data | Third year: scripting for a staffing website, defense company work | . | A church group internship: front-end ram development and arts branding. | High School Intern Program: industry figures and webdevelopment. | An internship with a UCSD Professor: learn about the academia sicde of CS. | . | . There are many opportunities for internships and jobs. I should connect with my teachers and attempt to join internships. . Personal Projects . Find time to work on personal projects, they are impressive on resumes, especially if you don’t have work experiance. Have 2 or 3 projects. | Work on visual projects, could be something fun: games or path finding algorithms. | . When I learn a bit more about programming, I should try to code a personal project related to my interests. I love writing, so maybe I can code a blog posting writing pieces. . Applying for Internships . Apply at the beggining of the school year. September-Novemeber the year before. | Smaller companies do take high school interns | Add people/companies on linkdin. This can help build networks for me later. | Get referals from people who work in the companies. This can add weight to your application. | . Summary of Key-Takeaways . Ultimatly, this panel has helped me think of computer science as a possible career path. Even if I don’t like computer science itself, learning programming can help me in another major. I understand that starting to learn CS is going to be hard because I’ve never done it before, but I realized that I just need to keep pushing. And these alumani are proof that I can also be sucessfull in learning computer science. To further develop my CS experiance, I should start networking and apply for internships. .",
            "url": "https://sreejagangapuram.github.io/Sreeja-Gangapuram/markdown/week1/2022/08/29/pannel-write-up.html",
            "relUrl": "/markdown/week1/2022/08/29/pannel-write-up.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Study Guides for Each Class",
            "content": "Study Guide of Topics To Review by order of Appearance . AP Calculus AB: . Limits | Parent Graphs of all functions | Algebraic Limits | . AP English Language: . Rhetorical Devices (diction, rhetorical appeals, etc.) - Look at summer assignment for list of devices. | Rhetorical Situation | . AP Biology: . Unit 7 Topics: Natural Selection | Evolution | Competition | Variation | Adaptation | . | . Honors Principles of Engineering: . Engineering Career Paths | The procedure of building a testbed | .",
            "url": "https://sreejagangapuram.github.io/Sreeja-Gangapuram/markdown/week1/2022/08/28/studyguides.html",
            "relUrl": "/markdown/week1/2022/08/28/studyguides.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Key Learning and Progress - Week of August 22, 2022",
            "content": "Week of August 22, 2022 Key Learning in One Spot . Learned to use the python Kernal to create a quiz also learned to use repeating lines of code | . | Installed bash learned how to save tool checks as posts | . | Learned how to number pages and also how to add a table of contents with links | . | .",
            "url": "https://sreejagangapuram.github.io/Sreeja-Gangapuram/markdown/week1/2022/08/28/keylearning.html",
            "relUrl": "/markdown/week1/2022/08/28/keylearning.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Installation Checks",
            "content": "Python Checks . python --version python2 --version . Python 3.9.12 Python 2.7.18 . Conda Packages . conda list . # packages in environment at /Users/SreejaGangapuram_1/opt/anaconda3: # # Name Version Build Channel _ipyw_jlab_nb_ext_conf 0.1.0 py39hecd8cb5_1 aiohttp 3.8.1 py39hca72f7f_1 aiosignal 1.2.0 pyhd3eb1b0_0 alabaster 0.7.12 pyhd3eb1b0_0 anaconda 2022.05 py39_0 anaconda-client 1.9.0 py39hecd8cb5_0 anaconda-navigator 2.2.0 py39hecd8cb5_0 anaconda-project 0.10.2 pyhd3eb1b0_0 anyio 3.5.0 py39hecd8cb5_0 appdirs 1.4.4 pyhd3eb1b0_0 applaunchservices 0.2.1 pyhd3eb1b0_0 appnope 0.1.2 py39hecd8cb5_1001 appscript 1.1.2 py39h9ed2024_0 argon2-cffi 21.3.0 pyhd3eb1b0_0 argon2-cffi-bindings 21.2.0 py39hca72f7f_0 arrow 1.2.2 pyhd3eb1b0_0 astroid 2.6.6 py39hecd8cb5_0 astropy 5.0.4 py39h67323c0_0 asttokens 2.0.5 pyhd3eb1b0_0 async-timeout 4.0.1 pyhd3eb1b0_0 atomicwrites 1.4.0 py_0 attrs 21.4.0 pyhd3eb1b0_0 automat 20.2.0 py_0 autopep8 1.6.0 pyhd3eb1b0_0 babel 2.9.1 pyhd3eb1b0_0 backcall 0.2.0 pyhd3eb1b0_0 backports 1.1 pyhd3eb1b0_0 backports.functools_lru_cache 1.6.4 pyhd3eb1b0_0 backports.tempfile 1.0 pyhd3eb1b0_1 backports.weakref 1.0.post1 py_1 bash-kernel 0.8.0 pypi_0 pypi bcrypt 3.2.0 py39h9ed2024_0 beautifulsoup4 4.11.1 py39hecd8cb5_0 binaryornot 0.4.4 pyhd3eb1b0_1 bitarray 2.4.1 py39hca72f7f_0 bkcharts 0.2 py39hecd8cb5_0 black 19.10b0 py_0 blas 1.0 mkl bleach 4.1.0 pyhd3eb1b0_0 blosc 1.21.0 h2842e9f_0 bokeh 2.4.2 py39hecd8cb5_0 boto3 1.21.32 pyhd3eb1b0_0 botocore 1.24.32 pyhd3eb1b0_0 bottleneck 1.3.4 py39h67323c0_0 brotli 1.0.9 hb1e8313_2 brotlipy 0.7.0 py39h9ed2024_1003 brunsli 0.1 h23ab428_0 bzip2 1.0.8 h1de35cc_0 c-ares 1.18.1 hca72f7f_0 ca-certificates 2022.3.29 hecd8cb5_1 cachetools 4.2.2 pyhd3eb1b0_0 certifi 2021.10.8 py39hecd8cb5_2 cffi 1.15.0 py39hc55c11b_1 cfitsio 3.470 hee0f690_6 chardet 4.0.0 py39hecd8cb5_1003 charls 2.2.0 h23ab428_0 charset-normalizer 2.0.4 pyhd3eb1b0_0 click 8.0.4 py39hecd8cb5_0 cloudpickle 2.0.0 pyhd3eb1b0_0 clyent 1.2.2 py39hecd8cb5_1 colorama 0.4.4 pyhd3eb1b0_0 colorcet 2.0.6 pyhd3eb1b0_0 conda 4.14.0 py39hecd8cb5_0 conda-build 3.21.8 py39hecd8cb5_2 conda-content-trust 0.1.1 pyhd3eb1b0_0 conda-env 2.6.0 1 conda-pack 0.6.0 pyhd3eb1b0_0 conda-package-handling 1.8.1 py39hca72f7f_0 conda-repo-cli 1.0.4 pyhd3eb1b0_0 conda-token 0.3.0 pyhd3eb1b0_0 conda-verify 3.4.2 py_1 constantly 15.1.0 pyh2b92418_0 cookiecutter 1.7.3 pyhd3eb1b0_0 cryptography 3.4.8 py39h2fd3fbb_0 cssselect 1.1.0 pyhd3eb1b0_0 curl 7.82.0 hca72f7f_0 cycler 0.11.0 pyhd3eb1b0_0 cython 0.29.28 py39he9d5cce_0 cytoolz 0.11.0 py39h9ed2024_0 daal4py 2021.5.0 py39h24a4e90_0 dal 2021.5.0 hecd8cb5_782 dask 2022.2.1 pyhd3eb1b0_0 dask-core 2022.2.1 pyhd3eb1b0_0 dataclasses 0.8 pyh6d0b6a4_7 datashader 0.13.0 pyhd3eb1b0_1 datashape 0.5.4 py39hecd8cb5_1 debugpy 1.5.1 py39he9d5cce_0 decorator 5.1.1 pyhd3eb1b0_0 defusedxml 0.7.1 pyhd3eb1b0_0 diff-match-patch 20200713 pyhd3eb1b0_0 distributed 2022.2.1 pyhd3eb1b0_0 docutils 0.17.1 py39hecd8cb5_1 entrypoints 0.4 py39hecd8cb5_0 et_xmlfile 1.1.0 py39hecd8cb5_0 executing 0.8.3 pyhd3eb1b0_0 filelock 3.6.0 pyhd3eb1b0_0 flake8 3.9.2 pyhd3eb1b0_0 flask 1.1.2 pyhd3eb1b0_0 fonttools 4.25.0 pyhd3eb1b0_0 freetype 2.11.0 hd8bbffd_0 frozenlist 1.2.0 py39hca72f7f_0 fsspec 2022.2.0 pyhd3eb1b0_0 future 0.18.2 py39hecd8cb5_1 gensim 4.1.2 py39he9d5cce_0 giflib 5.2.1 haf1e3a3_0 glob2 0.7 pyhd3eb1b0_0 gmp 6.2.1 h23ab428_2 gmpy2 2.1.2 py39hd5de756_0 google-api-core 1.25.1 pyhd3eb1b0_0 google-auth 1.33.0 pyhd3eb1b0_0 google-cloud-core 1.7.1 pyhd3eb1b0_0 google-cloud-storage 1.31.0 py_0 google-crc32c 1.1.2 py39h9ed2024_0 google-resumable-media 1.3.1 pyhd3eb1b0_1 googleapis-common-protos 1.53.0 py39hecd8cb5_0 greenlet 1.1.1 py39h23ab428_0 grpcio 1.42.0 py39ha29bfda_0 h5py 3.6.0 py39h4a1dd59_0 hdf5 1.10.6 hdbbcd12_0 heapdict 1.0.1 pyhd3eb1b0_0 holoviews 1.14.8 pyhd3eb1b0_0 hvplot 0.7.3 pyhd3eb1b0_1 hyperlink 21.0.0 pyhd3eb1b0_0 icu 58.2 h0a44026_3 idna 3.3 pyhd3eb1b0_0 imagecodecs 2021.8.26 py39ha952a84_0 imageio 2.9.0 pyhd3eb1b0_0 imagesize 1.3.0 pyhd3eb1b0_0 importlib-metadata 4.11.3 py39hecd8cb5_0 importlib_metadata 4.11.3 hd3eb1b0_0 incremental 21.3.0 pyhd3eb1b0_0 inflection 0.5.1 py39hecd8cb5_0 iniconfig 1.1.1 pyhd3eb1b0_0 intake 0.6.5 pyhd3eb1b0_0 intel-openmp 2021.4.0 hecd8cb5_3538 intervaltree 3.1.0 pyhd3eb1b0_0 ipykernel 6.9.1 py39hecd8cb5_0 ipython 8.2.0 py39hecd8cb5_0 ipython_genutils 0.2.0 pyhd3eb1b0_1 ipywidgets 7.6.5 pyhd3eb1b0_1 isort 5.9.3 pyhd3eb1b0_0 itemadapter 0.3.0 pyhd3eb1b0_0 itemloaders 1.0.4 pyhd3eb1b0_1 itsdangerous 2.0.1 pyhd3eb1b0_0 jdcal 1.4.1 pyhd3eb1b0_0 jedi 0.18.1 py39hecd8cb5_1 jinja2 2.11.3 pyhd3eb1b0_0 jinja2-time 0.2.0 pyhd3eb1b0_3 jmespath 0.10.0 pyhd3eb1b0_0 joblib 1.1.0 pyhd3eb1b0_0 jpeg 9e hca72f7f_0 jq 1.6 h9ed2024_1000 json5 0.9.6 pyhd3eb1b0_0 jsonschema 4.4.0 py39hecd8cb5_0 jupyter 1.0.0 py39hecd8cb5_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39hecd8cb5_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 jxrlib 1.1 haf1e3a3_2 keyring 23.4.0 py39hecd8cb5_0 kiwisolver 1.3.2 py39he9d5cce_0 krb5 1.19.2 hcd88c3b_0 lazy-object-proxy 1.6.0 py39h9ed2024_0 lcms2 2.12 hf1fd2bf_0 lerc 3.0 he9d5cce_0 libaec 1.0.4 hb1e8313_1 libarchive 3.4.2 haa3ed63_0 libcrc32c 1.1.1 hb1e8313_2 libcurl 7.82.0 h6dfd666_0 libcxx 12.0.0 h2f01273_0 libdeflate 1.8 h9ed2024_5 libedit 3.1.20210910 hca72f7f_0 libev 4.33 h9ed2024_1 libffi 3.3 hb1e8313_2 libgfortran 3.0.1 h93005f0_2 libiconv 1.16 hca72f7f_2 libidn2 2.3.2 h9ed2024_0 liblief 0.11.5 he9d5cce_1 libllvm11 11.1.0 h46f1229_1 libnghttp2 1.46.0 ha29bfda_0 libpng 1.6.37 ha441bb4_0 libprotobuf 3.19.1 h8346a28_0 libsodium 1.0.18 h1de35cc_0 libspatialindex 1.9.3 h23ab428_0 libssh2 1.10.0 h0a4fc7d_0 libtiff 4.2.0 h87d7836_0 libunistring 0.9.10 h9ed2024_0 libwebp 1.2.2 h56c3ce4_0 libwebp-base 1.2.2 hca72f7f_0 libxml2 2.9.12 hcdb78fc_0 libxslt 1.1.34 h83b36ba_0 libzopfli 1.0.3 hb1e8313_0 llvm-openmp 12.0.0 h0dcd299_1 llvmlite 0.38.0 py39h8346a28_0 locket 0.2.1 py39hecd8cb5_2 lxml 4.8.0 py39h65b224f_0 lz4-c 1.9.3 h23ab428_1 lzo 2.10 haf1e3a3_2 markdown 3.3.4 py39hecd8cb5_0 markupsafe 2.0.1 py39h9ed2024_0 matplotlib 3.5.1 py39hecd8cb5_1 matplotlib-base 3.5.1 py39hfb0c5b7_1 matplotlib-inline 0.1.2 pyhd3eb1b0_2 mccabe 0.6.1 py39hecd8cb5_1 mistune 0.8.4 py39h9ed2024_1000 mkl 2021.4.0 hecd8cb5_637 mkl-service 2.4.0 py39h9ed2024_0 mkl_fft 1.3.1 py39h4ab4a9b_0 mkl_random 1.2.2 py39hb2f4e1b_0 mock 4.0.3 pyhd3eb1b0_0 mpc 1.1.0 h6ef4df4_1 mpfr 4.0.2 h9066e36_1 mpi 1.0 mpich mpich 3.3.2 hc856adb_0 mpmath 1.2.1 py39hecd8cb5_0 msgpack-python 1.0.2 py39hf7b0b51_1 multidict 5.2.0 py39hca72f7f_2 multipledispatch 0.6.0 py39hecd8cb5_0 munkres 1.1.4 py_0 mypy_extensions 0.4.3 py39hecd8cb5_1 navigator-updater 0.2.1 py39_1 nbclassic 0.3.5 pyhd3eb1b0_0 nbclient 0.5.13 py39hecd8cb5_0 nbconvert 6.4.4 py39hecd8cb5_0 nbformat 5.3.0 py39hecd8cb5_0 ncurses 6.3 hca72f7f_2 nest-asyncio 1.5.5 py39hecd8cb5_0 networkx 2.7.1 pyhd3eb1b0_0 nltk 3.7 pyhd3eb1b0_0 nodejs 10.13.0 h0a44026_0 nose 1.3.7 pyhd3eb1b0_1008 notebook 6.4.8 py39hecd8cb5_0 numba 0.55.1 py39hae1ba45_0 numexpr 2.8.1 py39h2e5f0a9_0 numpy 1.21.5 py39h2e5f0a9_1 numpy-base 1.21.5 py39h3b1a694_1 numpydoc 1.2 pyhd3eb1b0_0 olefile 0.46 pyhd3eb1b0_0 oniguruma 6.9.7.1 h9ed2024_0 openjpeg 2.4.0 h66ea3da_0 openpyxl 3.0.9 pyhd3eb1b0_0 openssl 1.1.1n hca72f7f_0 packaging 21.3 pyhd3eb1b0_0 pandas 1.4.2 py39he9d5cce_0 pandocfilters 1.5.0 pyhd3eb1b0_0 panel 0.13.0 py39hecd8cb5_0 param 1.12.0 pyhd3eb1b0_0 parsel 1.6.0 py39hecd8cb5_0 parso 0.8.3 pyhd3eb1b0_0 partd 1.2.0 pyhd3eb1b0_1 pathspec 0.7.0 py_0 patsy 0.5.2 py39hecd8cb5_1 pep8 1.7.1 py39hecd8cb5_0 pexpect 4.8.0 pyhd3eb1b0_3 pickleshare 0.7.5 pyhd3eb1b0_1003 pillow 9.0.1 py39hde71d04_0 pip 21.2.4 py39hecd8cb5_0 pkginfo 1.8.2 pyhd3eb1b0_0 plotly 5.6.0 pyhd3eb1b0_0 pluggy 1.0.0 py39hecd8cb5_1 poyo 0.5.0 pyhd3eb1b0_0 prometheus_client 0.13.1 pyhd3eb1b0_0 prompt-toolkit 3.0.20 pyhd3eb1b0_0 prompt_toolkit 3.0.20 hd3eb1b0_0 protego 0.1.16 py_0 protobuf 3.19.1 py39he9d5cce_0 psutil 5.8.0 py39h9ed2024_1 ptyprocess 0.7.0 pyhd3eb1b0_2 pure_eval 0.2.2 pyhd3eb1b0_0 py 1.11.0 pyhd3eb1b0_0 py-lief 0.11.5 py39he9d5cce_1 pyasn1 0.4.8 pyhd3eb1b0_0 pyasn1-modules 0.2.8 py_0 pycodestyle 2.7.0 pyhd3eb1b0_0 pycosat 0.6.3 py39h9ed2024_0 pycparser 2.21 pyhd3eb1b0_0 pyct 0.4.6 py39hecd8cb5_0 pycurl 7.44.1 py39hbcfaee0_1 pydispatcher 2.0.5 py39hecd8cb5_2 pydocstyle 6.1.1 pyhd3eb1b0_0 pyerfa 2.0.0 py39h9ed2024_0 pyflakes 2.3.1 pyhd3eb1b0_0 pygments 2.11.2 pyhd3eb1b0_0 pyhamcrest 2.0.2 pyhd3eb1b0_2 pyjwt 2.1.0 py39hecd8cb5_0 pylint 2.9.6 py39hecd8cb5_1 pyls-spyder 0.4.0 pyhd3eb1b0_0 pyodbc 4.0.32 py39he9d5cce_1 pyopenssl 21.0.0 pyhd3eb1b0_1 pyparsing 3.0.4 pyhd3eb1b0_0 pyqt 5.9.2 py39h23ab428_6 pyrsistent 0.18.0 py39hca72f7f_0 pysocks 1.7.1 py39hecd8cb5_0 pytables 3.6.1 py39h648f197_1 pytest 7.1.1 py39hecd8cb5_0 python 3.9.12 hdfd78df_0 python-dateutil 2.8.2 pyhd3eb1b0_0 python-fastjsonschema 2.15.1 pyhd3eb1b0_0 python-libarchive-c 2.9 pyhd3eb1b0_1 python-lsp-black 1.0.0 pyhd3eb1b0_0 python-lsp-jsonrpc 1.0.0 pyhd3eb1b0_0 python-lsp-server 1.2.4 pyhd3eb1b0_0 python-slugify 5.0.2 pyhd3eb1b0_0 python-snappy 0.6.0 py39h23ab428_3 python.app 3 py39hca72f7f_0 pytz 2021.3 pyhd3eb1b0_0 pyviz_comms 2.0.2 pyhd3eb1b0_0 pywavelets 1.3.0 py39hca72f7f_0 pyyaml 6.0 py39hca72f7f_1 pyzmq 22.3.0 py39he9d5cce_2 qdarkstyle 3.0.2 pyhd3eb1b0_0 qstylizer 0.1.10 pyhd3eb1b0_0 qt 5.9.7 h468cd18_1 qtawesome 1.0.3 pyhd3eb1b0_0 qtconsole 5.3.0 pyhd3eb1b0_0 qtpy 2.0.1 pyhd3eb1b0_0 queuelib 1.5.0 py39hecd8cb5_0 readline 8.1.2 hca72f7f_1 regex 2022.3.15 py39hca72f7f_0 requests 2.27.1 pyhd3eb1b0_0 requests-file 1.5.1 pyhd3eb1b0_0 ripgrep 12.1.1 0 rope 0.22.0 pyhd3eb1b0_0 rsa 4.7.2 pyhd3eb1b0_1 rtree 0.9.7 py39hecd8cb5_1 ruamel_yaml 0.15.100 py39h9ed2024_0 s3transfer 0.5.0 pyhd3eb1b0_0 scikit-image 0.19.2 py39hae1ba45_0 scikit-learn 1.0.2 py39hae1ba45_1 scikit-learn-intelex 2021.5.0 py39hecd8cb5_0 scipy 1.7.3 py39h8c7af03_0 scrapy 2.6.1 py39hecd8cb5_0 seaborn 0.11.2 pyhd3eb1b0_0 send2trash 1.8.0 pyhd3eb1b0_1 service_identity 18.1.0 pyhd3eb1b0_1 setuptools 61.2.0 py39hecd8cb5_0 sip 4.19.13 py39h23ab428_0 six 1.16.0 pyhd3eb1b0_1 smart_open 5.1.0 pyhd3eb1b0_0 snappy 1.1.9 he9d5cce_0 sniffio 1.2.0 py39hecd8cb5_1 snowballstemmer 2.2.0 pyhd3eb1b0_0 sortedcollections 2.1.0 pyhd3eb1b0_0 sortedcontainers 2.4.0 pyhd3eb1b0_0 soupsieve 2.3.1 pyhd3eb1b0_0 sphinx 4.4.0 pyhd3eb1b0_0 sphinxcontrib-applehelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-devhelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-htmlhelp 2.0.0 pyhd3eb1b0_0 sphinxcontrib-jsmath 1.0.1 pyhd3eb1b0_0 sphinxcontrib-qthelp 1.0.3 pyhd3eb1b0_0 sphinxcontrib-serializinghtml 1.1.5 pyhd3eb1b0_0 spyder 5.1.5 py39hecd8cb5_1 spyder-kernels 2.1.3 py39hecd8cb5_0 sqlalchemy 1.4.32 py39hca72f7f_0 sqlite 3.38.2 h707629a_0 stack_data 0.2.0 pyhd3eb1b0_0 statsmodels 0.13.2 py39hca72f7f_0 sympy 1.10.1 py39hecd8cb5_0 tabulate 0.8.9 py39hecd8cb5_0 tbb 2021.5.0 haf03e11_0 tbb4py 2021.5.0 py39haf03e11_0 tblib 1.7.0 pyhd3eb1b0_0 tenacity 8.0.1 py39hecd8cb5_0 terminado 0.13.1 py39hecd8cb5_0 testpath 0.5.0 pyhd3eb1b0_0 text-unidecode 1.3 pyhd3eb1b0_0 textdistance 4.2.1 pyhd3eb1b0_0 threadpoolctl 2.2.0 pyh0d69192_0 three-merge 0.1.1 pyhd3eb1b0_0 tifffile 2021.7.2 pyhd3eb1b0_2 tinycss 0.4 pyhd3eb1b0_1002 tk 8.6.11 h7bc2e8c_0 tldextract 3.2.0 pyhd3eb1b0_0 toml 0.10.2 pyhd3eb1b0_0 tomli 1.2.2 pyhd3eb1b0_0 toolz 0.11.2 pyhd3eb1b0_0 tornado 6.1 py39h9ed2024_0 tqdm 4.64.0 py39hecd8cb5_0 traitlets 5.1.1 pyhd3eb1b0_0 twisted 22.2.0 py39hca72f7f_0 typed-ast 1.4.3 py39h9ed2024_1 typing-extensions 4.1.1 hd3eb1b0_0 typing_extensions 4.1.1 pyh06a4308_0 tzdata 2022a hda174b7_0 ujson 5.1.0 py39he9d5cce_0 unidecode 1.2.0 pyhd3eb1b0_0 unixodbc 2.3.9 haf1e3a3_0 urllib3 1.26.9 py39hecd8cb5_0 w3lib 1.21.0 pyhd3eb1b0_0 watchdog 2.1.6 py39h999c104_0 wcwidth 0.2.5 pyhd3eb1b0_0 webencodings 0.5.1 py39hecd8cb5_1 websocket-client 0.58.0 py39hecd8cb5_4 werkzeug 2.0.3 pyhd3eb1b0_0 wget 1.21.3 h6dfd666_0 wheel 0.37.1 pyhd3eb1b0_0 widgetsnbextension 3.5.2 py39hecd8cb5_0 wrapt 1.12.1 py39h9ed2024_1 wurlitzer 3.0.2 py39hecd8cb5_0 xarray 0.20.1 pyhd3eb1b0_1 xlrd 2.0.1 pyhd3eb1b0_0 xlsxwriter 3.0.3 pyhd3eb1b0_0 xlwings 0.24.9 py39hecd8cb5_0 xz 5.2.5 h1de35cc_0 yaml 0.2.5 haf1e3a3_0 yapf 0.31.0 pyhd3eb1b0_0 yarl 1.6.3 py39h9ed2024_0 zeromq 4.3.4 h23ab428_0 zfp 0.5.5 he9d5cce_6 zict 2.0.0 pyhd3eb1b0_0 zipp 3.7.0 pyhd3eb1b0_0 zlib 1.2.12 h4dc903c_2 zope 1.0 py39hecd8cb5_1 zope.interface 5.4.0 py39h9ed2024_0 zstd 1.4.9 h322a384_0 . echo Conda Check # test for a kernel installation test=&quot;jupyter&quot; # keyword check=`conda list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . Conda Check jupyter 1.0.0 py39hecd8cb5_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39hecd8cb5_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 . Jupyter Checks . jupyter --version jupyter kernelspec list . Selected Jupyter core packages... IPython : 8.2.0 ipykernel : 6.9.1 ipywidgets : 7.6.5 jupyter_client : 6.1.12 jupyter_core : 4.9.2 jupyter_server : 1.13.5 jupyterlab : 3.3.2 nbclient : 0.5.13 nbconvert : 6.4.4 nbformat : 5.3.0 notebook : 6.4.8 qtconsole : 5.3.0 traitlets : 5.1.1 Available kernels: python3106jvsc74a57bd0aee8b7b246df8f9039afb4144a1f6fd8d2ca17a180786b69acc140d282b71a49 /Users/SreejaGangapuram_1/.vscode/extensions/ms-toolsai.jupyter-2022.7.1102252217/temp/jupyter/kernels/python3106jvsc74a57bd0aee8b7b246df8f9039afb4144a1f6fd8d2ca17a180786b69acc140d282b71a49 python3912jvsc74a57bd0b23636a0f379aa6d1164588bdd787c11dbc1e3849696a45eed6ea7802b115e71 /Users/SreejaGangapuram_1/.vscode/extensions/ms-toolsai.jupyter-2022.7.1102252217/temp/jupyter/kernels/python3912jvsc74a57bd0b23636a0f379aa6d1164588bdd787c11dbc1e3849696a45eed6ea7802b115e71 bash /Users/SreejaGangapuram_1/Library/Jupyter/kernels/bash javascript /Users/SreejaGangapuram_1/Library/Jupyter/kernels/javascript python3 /Users/SreejaGangapuram_1/opt/anaconda3/share/jupyter/kernels/python3 . test=&quot;python3&quot; # keyword check=`jupyter kernelspec list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . python3106jvsc74a57bd0aee8b7b246df8f9039afb4144a1f6fd8d2ca17a180786b69acc140d282b71a49 /Users/SreejaGangapuram_1/.vscode/extensions/ms-toolsai.jupyter-2022.7.1102252217/temp/jupyter/kernels/python3106jvsc74a57bd0aee8b7b246df8f9039afb4144a1f6fd8d2ca17a180786b69acc140d282b71a49 python3912jvsc74a57bd0b23636a0f379aa6d1164588bdd787c11dbc1e3849696a45eed6ea7802b115e71 /Users/SreejaGangapuram_1/.vscode/extensions/ms-toolsai.jupyter-2022.7.1102252217/temp/jupyter/kernels/python3912jvsc74a57bd0b23636a0f379aa6d1164588bdd787c11dbc1e3849696a45eed6ea7802b115e71 python3 /Users/SreejaGangapuram_1/opt/anaconda3/share/jupyter/kernels/python3 .",
            "url": "https://sreejagangapuram.github.io/Sreeja-Gangapuram/techtalk/bash_checks",
            "relUrl": "/techtalk/bash_checks",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Vocabulary/Key Learning Quiz",
            "content": "import getpass, sys def question_and_answer(prompt): print(&quot;Question: &quot; + prompt) msg = input() print(&quot;Answer: &quot; + msg) def question_with_response(prompt): print(&quot;Question: &quot; + prompt) msg = input() return msg def evaluate_answer(answer, response, correct): if response == answer: print(response + &quot; is correct!&quot;) correct += 1 else: print(response + &quot; is incorrect!&quot;) return correct questions = 3 correct = 0 print(&#39;Hello, &#39; + getpass.getuser() + &quot; running &quot; + sys.executable) print(&quot;You will be asked &quot; + str(questions) + &quot; questions.&quot;) question_and_answer(&quot;Are you ready to take a test?&quot;) rsp = question_with_response(&quot;Which key word in Python is used to define a function?&quot;) correct = evaluate_answer(&quot;def&quot;, rsp, correct) print(correct) rsp = question_with_response(&quot;What is a synonym for a procedure?&quot;) correct = evaluate_answer(&quot;function&quot;, rsp, correct) print(correct) rsp = question_with_response(&quot;What do two or more lines of code form?&quot;) correct = evaluate_answer(&quot;sequence&quot;, rsp, correct) print(correct) print(getpass.getuser() + &quot; you scored &quot; + str(correct) +&quot;/&quot; + str(questions)) . Hello, SreejaGangapuram running /usr/local/bin/python3 You will be asked 3 questions. Question: Are you ready to take a test? Answer: yes Question: Which key word in Python is used to define a function? def is correct! 1 Question: What is a synonym for a procedure? function is correct! 2 Question: What do two or more lines of code form? sequence is correct! 3 SreejaGangapuram you scored 3/3 .",
            "url": "https://sreejagangapuram.github.io/Sreeja-Gangapuram/week1/2022/08/25/quiz-notebook1.html",
            "relUrl": "/week1/2022/08/25/quiz-notebook1.html",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "Bash Tutorial",
            "content": "echo &quot;Using conditional statement to create a project directory and project&quot; # Variable section export project_dir=$HOME/vscode # change vscode to different name to test git clone export project=$project_dir/APCSP # change APCSP to name of project from git clone export project_repo=&quot;https://github.com/nighthawkcoders/APCSP.git&quot; # change to project of choice cd ~ # start in home directory # Conditional block to make a project directory if [ ! -d $project_dir ] then echo &quot;Directory $project_dir does not exists... makinng directory $project_dir&quot; mkdir -p $project_dir fi echo &quot;Directory $project_dir exists.&quot; # Conditional block to git clone a project from project_repo if [ ! -d $project ] then echo &quot;Directory $project does not exists... cloning $project_repo&quot; cd $project_dir git clone $project_repo cd ~ fi echo &quot;Directory $project exists.&quot; . echo &quot;Navigate to project, then navigate to area wwhere files were cloned&quot; cd $project pwd echo &quot;&quot; echo &quot;list top level or root of files with project pulled from github&quot; ls echo &quot;&quot; echo &quot;list again with hidden files pulled from github&quot; ls -a # hidden files flag, many shell commands have flags echo &quot;&quot; echo &quot;list all files in long format&quot; ls -al # all files and long listing . echo &quot;Look for posts&quot; export posts=$project/_posts # _posts inside project cd $posts # this should exist per fastpages pwd # present working directory ls -l # list posts . echo &quot;Look for notebooks&quot; export notebooks=$project/_notebooks # _notebooks is inside project cd $notebooks # this should exist per fastpages pwd # present working directory ls -l # list notebooks . echo &quot;Look for images in notebooks, print working directory, list files&quot; cd $notebooks/images # this should exist per fastpages pwd ls -l . echo &quot;Navigate to project, then navigate to area wwhere files were cloned&quot; cd $project echo &quot;show the contents of README.md&quot; echo &quot;&quot; cat README.md # show contents of file, in this case markdown echo &quot;&quot; echo &quot;end of README.md&quot; . echo &quot;Show the shell environment variables, key on left of equal value on right&quot; echo &quot;&quot; env . cd $project echo &quot;&quot; echo &quot;show the secrets of .git&quot; cd .git ls -l echo &quot;&quot; echo &quot;look at config file&quot; cat config .",
            "url": "https://sreejagangapuram.github.io/Sreeja-Gangapuram/week1/2022/08/22/bash.html",
            "relUrl": "/week1/2022/08/22/bash.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "First Post!",
            "content": "This is my First Markdown Post :) . My travel list: . London, the Maldives, Singapore, Japan, Australia, Brazil, Spain… .",
            "url": "https://sreejagangapuram.github.io/Sreeja-Gangapuram/markdown/week0/2022/08/20/first-post.html",
            "relUrl": "/markdown/week0/2022/08/20/first-post.html",
            "date": " • Aug 20, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "Jupyter Notebook 1 - Print Command Try-out",
            "content": "print(&quot;Hello from Sreeja..&quot;) . Hello from Sreeja.. .",
            "url": "https://sreejagangapuram.github.io/Sreeja-Gangapuram/week0/2022/08/20/first-markup-notebook.html",
            "relUrl": "/week0/2022/08/20/first-markup-notebook.html",
            "date": " • Aug 20, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . ModuleNotFoundError Traceback (most recent call last) /Users/SreejaGangapuram_1/vscode/Sreeja-Gangapuram/_notebooks/2020-02-20-test.ipynb Cell 8 in &lt;cell line: 2&gt;() &lt;a href=&#39;vscode-notebook-cell:/Users/SreejaGangapuram_1/vscode/Sreeja-Gangapuram/_notebooks/2020-02-20-test.ipynb#X10sZmlsZQ%3D%3D?line=0&#39;&gt;1&lt;/a&gt; #collapse-hide -&gt; &lt;a href=&#39;vscode-notebook-cell:/Users/SreejaGangapuram_1/vscode/Sreeja-Gangapuram/_notebooks/2020-02-20-test.ipynb#X10sZmlsZQ%3D%3D?line=1&#39;&gt;2&lt;/a&gt; import pandas as pd &lt;a href=&#39;vscode-notebook-cell:/Users/SreejaGangapuram_1/vscode/Sreeja-Gangapuram/_notebooks/2020-02-20-test.ipynb#X10sZmlsZQ%3D%3D?line=2&#39;&gt;3&lt;/a&gt; import altair as alt ModuleNotFoundError: No module named &#39;pandas&#39; . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://sreejagangapuram.github.io/Sreeja-Gangapuram/week0/2020/02/20/test.html",
            "relUrl": "/week0/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post14": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://sreejagangapuram.github.io/Sreeja-Gangapuram/markdown/week0/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/week0/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  
      ,"page0": {
          "title": "Table of Contents",
          "content": "View all of my posts here: . Week 0: . An Example Markdown Post Click Here | Fastpages Notebook Blog Post Click Here | Jupyter Notebook 1 - Print Command Try-out Click Here | First Post! Click Here | Week 1: . Vocabulary/Key Learning Quiz Click Here | Installation Checks Click Here | Key Learning and Progress - Week of August 22, 2022 Click Here | Study Guides for Each Class Click Here | Week 2: . CS Alumnai Panel Write-up Click Here | Lists, Dictionaries, Iteration Click Here |",
          "url": "https://sreejagangapuram.github.io/Sreeja-Gangapuram/tableofcontents/",
          "relUrl": "/tableofcontents/",
          "date": ""
      }
      
  

  
      ,"page1": {
          "title": "Weekly Updates",
          "content": "Week Issues Grades . 0 😱 | Tools Setup Hacks | 3/3 | . 1 😭 | Week 1 Blog Update Hacks | 2.9/3 | . 2 😐 | Data Abstraction Hacks | /3 | . 3 😃 | Will be updated soon. Will be updated soon. | &lt;/tr&gt; &lt;/table&gt; | .",
          "url": "https://sreejagangapuram.github.io/Sreeja-Gangapuram/weeklyupdates",
          "relUrl": "/weeklyupdates",
          "date": ""
      }
      
  

  

  
      ,"page3": {
          "title": "About Me",
          "content": "I’m a Del Norte High School CSP Student. This blog is for Del Norte High School CS 1. . a public school in San Diego, California. &#8617; . |",
          "url": "https://sreejagangapuram.github.io/Sreeja-Gangapuram/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  

  

  
  

  
  

  
  

  
  

  
  

  
      ,"page12": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://sreejagangapuram.github.io/Sreeja-Gangapuram/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}